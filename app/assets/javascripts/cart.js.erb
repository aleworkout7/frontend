let requests = [];

$(".btn-cart-submit").click((e) => {
	e.preventDefault();
	$("#update-user-modal").modal();
});

$(".user-submit").click(function(e) {
	e.preventDefault();

	let $form = $(this).parents("form");
	let action = $form.attr("action");
	$.ajax({
		url: action,
		type: "PUT",
		data: $form.serialize(),
		success: () => {
			$("#update-user-modal").modal('toggle');
			$(".btn-cart-submit").parents("form").submit();
		}
	});
});

$('.btn-number').click(function(e){
	e.preventDefault();

	var fieldName = $(this).attr('data-field');
	var type      = $(this).attr('data-type');
	var input = $("input[name='"+fieldName+"']");
	var currentVal = parseInt(input.val());
	if (!isNaN(currentVal)) {
		if(type == 'minus') {

			if(currentVal > input.attr('min')) {
				input.val(currentVal - 1).change();
			}
			if(parseInt(input.val()) == input.attr('min')) {
				$(this).attr('disabled', true);
			}

		} else if(type == 'plus') {

			if(currentVal < input.attr('max')) {
				input.val(currentVal + 1).change();
			}
			if(parseInt(input.val()) == input.attr('max')) {
				$(this).attr('disabled', true);
			}

		}
	} else {
		input.val(0);
	}
});

$('.input-number').focusin(function(){
	$(this).data('oldValue', $(this).val());
});

$('.input-number').change(function() {
	const $item = $(this).parents(".cart-item");

	let minValue =  parseInt($(this).attr('min'));
	let maxValue =  parseInt($(this).attr('max'));
	let valueCurrent = parseInt($(this).val());
	let oldValue = $(this).data('oldValue');
	let name = $(this).attr('name');
	let product_id = $(this).data("id");
	let finalValue = valueCurrent;

	if (valueCurrent >= minValue) {
		$(".btn-number[data-type='minus'][data-field='"+name+"']").removeAttr('disabled')
	} else {
		alert('Sorry, the minimum value was reached');
		$(this).val(oldValue);
		finalValue = oldValue;
	}

	if (valueCurrent <= maxValue) {
		$(".btn-number[data-type='plus'][data-field='"+name+"']").removeAttr('disabled')
	} else {
		alert('Sorry, the maximum value was reached');
		$(this).val(oldValue);
		finalValue = oldValue;
	}

	$item.data("amount", finalValue);
	recalculateCart();
	makeRequest(product_id, finalValue);
});

$(".input-number").keydown(function (e) {
	// Allow: backspace, delete, tab, escape, enter and .
	if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 ||
	// Allow: Ctrl+A
	(e.keyCode == 65 && e.ctrlKey === true) ||
	// Allow: home, end, left, right
	(e.keyCode >= 35 && e.keyCode <= 39)) {
		// let it happen, don't do anything
		return;
	}
	// Ensure that it is a number and stop the keypress
	if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
		e.preventDefault();
	}
});

function makeRequest(product_id, value) {
	for (let req of requests) {
		req.abort();
	}

	let predio_id = $("#order_predio_id").val();
	let shop_id = $("#order_shop_id").val();
	let request = $.get(`/predios/${predio_id}/shops/${shop_id}/cart/update_amount/${product_id}?amount=${value}`);

	requests.push(request);
}

function recalculateCart() {
	let total = 0;
	$(".cart-item").each((k, v) => {
		let $item = $(v);
		let price = $item.data("price");
		let amount = $item.data("amount");

		total += (price * amount);
	});

	total = total.toFixed(2).toString();
	total = total.replace(".", ",");
	total = total.replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1.");
	$("#cart-total-price").html(total);
}
